name: 'Terraform Module Testing'
description: 'Tests the Terraform module.'

inputs:
  testing_path:
    description: "The path to the directory that contains the Terraform testing configuration."
    required: true

runs:
  using: 'composite'

  steps:

    - name: Matrix Config
      shell: sh
      run: |
        echo "${{ toJSON(matrix) }}"

    - name: Install Terraform (Alpine)
      if: startsWith(matrix.container.image, 'alpine:')
      shell: sh
      run: |
        apk add --no-cache git
        wget https://releases.hashicorp.com/terraform/${{ matrix.terraform_version }}/terraform_${{ matrix.terraform_version }}_linux_amd64.zip
        unzip terraform_${{ matrix.terraform_version }}_linux_amd64.zip
        mv terraform /usr/bin/terraform
        
    - name: Install Terraform (Redhat)
      if: startsWith(matrix.container.image, 'redhat/')
      shell: sh
      run: |
        yum -y update
        yum install -y yum-utils git
        yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
        yum -y install terraform-${{ matrix.terraform_version }}

    - name: Install Terraform (CentOS)
      if: startsWith(matrix.container.image, 'centos:')
      shell: sh
      run: |
        sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
        sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
        yum -y update
        yum install -y yum-utils git
        yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
        yum -y install terraform-${{ matrix.terraform_version }}

    - name: Install Terraform (Amazon Linux)
      if: startsWith(matrix.container.image, 'amazonlinux:')
      shell: sh
      run: |
        yum install -y yum-utils git
        yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
        yum -y install terraform-${{ matrix.terraform_version }}

    - name: Install Terraform (Fedora)
      if: startsWith(matrix.container.image, 'fedora:')
      shell: sh
      run: |
        dnf install -y dnf-plugins-core git
        dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo
        dnf -y install terraform-${{ matrix.terraform_version }}

    - name: Install Terraform (Ubuntu)
      if: startsWith(matrix.container.image, 'ubuntu:')
      shell: sh
      run: |
        apt-get update
        apt-get install -y curl gnupg lsb-release software-properties-common git
        curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
        apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        apt-get update
        apt-get install -y terraform=${{ matrix.terraform_version }}

    # Installation for when we're not running in a container
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      if: matrix.container.image == ''
      with:
        terraform_version: ${{ inputs.terraform_version }}

    # Checkout the repository
    - name: Checkout
      uses: actions/checkout@v3

    # Initialize the workspace
    - name: Terraform Init
      shell: sh
      working-directory: ${{ inputs.testing_path }}
      run: terraform init

    # Do an apply for each shell we want to test, if it's a specific shell
    - name: Terraform Apply (bash)
      if: matrix.shells == 'true'
      shell: sh
      working-directory: ${{ inputs.testing_path }}
      run: terraform apply -auto-approve -var "unix_interpreter=/bin/bash"
    - name: Terraform Destroy (bash)
      if: matrix.shells == 'true'
      shell: sh
      working-directory: ${{ inputs.testing_path }}
      run: terraform destroy -auto-approve -var "unix_interpreter=/bin/bash"

    - name: Terraform Apply (dash)
      if: matrix.shells == 'true'
      shell: sh
      working-directory: ${{ inputs.testing_path }}
      run: terraform apply -auto-approve -var "unix_interpreter=/bin/dash"
    - name: Terraform Destroy (dash)
      if: matrix.shells == 'true'
      shell: sh
      working-directory: ${{ inputs.testing_path }}
      run: terraform destroy -auto-approve -var "unix_interpreter=/bin/dash"

    # Apply the Terraform config without specifying a shell
    - name: Terraform Apply
      if: matrix.shells != 'true'
      shell: sh
      working-directory: ${{ inputs.testing_path }}
      run: terraform apply -auto-approve
    - name: Terraform Destroy
      if: matrix.shells != 'true'
      shell: sh
      working-directory: ${{ inputs.testing_path }}
      run: terraform destroy -auto-approve
