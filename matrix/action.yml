name: 'Terraform Module Testing Matrix'
description: 'Generates a Terraform module testing matrix for use with GitHub Actions.'

inputs:
  minimum_tf_version:
    description: "The minimum version of Terraform to test with."
    required: true

outputs:

  linux_containers_matrix: 
    description: "The JSON-encoded matrix to use for the Linux containers tests."
    value: '{"terraform_version": ${{ steps.terraform.outputs.versions }}, "images": ${{ steps.images.outputs.images }} }'

  terraform_versions:
    description: "The versions of Terraform to test with."
    value: ${{ steps.terraform.outputs.versions }}

  images:
    description: "The containers to test with."
    value: '["alpine:latest", "redhat/ubi9:latest", "fedora:latest", "centos:latest", "ubuntu:latest", "amazonlinux:1", "amazonlinux:2"]'


runs:
  using: 'composite'
  
  defaults:
    run:
      shell: bash

  steps:

    - name: Get Images
      id: images
      run: echo ::set-output name=images::'["alpine:latest", "redhat/ubi9:latest", "fedora:latest", "centos:latest", "ubuntu:latest", "amazonlinux:1", "amazonlinux:2"]'

    - name: Get Windows Versions
      id: windows
      run: echo ::set-output name=versions::'["windows-2022", "windows-2019", "windows-2016"]'

    - name: Get MacOS Versions
      id: macos
      run: echo ::set-output name=versions::'["mac-12", "mac-11", "mac-10.15"]'

    - name: Get Terraform Versions
      id: terraform
      run: |
        set -e

        lowest_version="${{ inputs.minimum_tf_version }}"
        lowest_major=$(echo $lowest_version | cut -d. -f1)
        lowest_minor=$(echo $lowest_version | cut -d. -f2)
        lowest_patch=$(echo $lowest_version | cut -d. -f3)

        versions_html=$(curl -s https://releases.hashicorp.com/terraform/ 2>&1)
        version_lines=$(echo "$versions_html" | grep -oE "terraform/[0-9]+\.[0-9]+\.[0-9]+/")

        selected_versions=""

        while read -r version ; do
            major=$(echo $version | cut -d. -f1)
            minor=$(echo $version | cut -d. -f2)
            patch=$(echo $version | cut -d. -f3)
            if [ $major -gt $lowest_major ] || ( [ $major -eq $lowest_major ] && [ $minor -gt $lowest_minor ] ) || ( [ $major -eq $lowest_major ] && [ $minor -eq $lowest_minor ] && [ $patch -ge $lowest_patch ] ); then
                if [ $patch -eq 0 ] || [ $version = $lowest_version ]; then
                    if [ -z $selected_versions ]; then
                        selected_versions="$version"
                    else
                        selected_versions="$selected_versions,$version"
                    fi
                fi
            fi
        done <<<$(echo "$version_lines" | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")

        echo ::set-output name=versions::$(jq -n --arg inarr "${selected_versions}" '$inarr | split(",")')

    # - name: Generate Linux Containers Matrix
    #   id: linux-containers-matrix
    #   run: echo ::set-output name=matrix::