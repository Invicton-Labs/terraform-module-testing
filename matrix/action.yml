name: 'Terraform Module Testing Matrix'
description: 'Generates a Terraform module testing matrix for use with GitHub Actions.'

inputs:
  minimum_tf_version:
    description: "The minimum version of Terraform to test with."
    required: true

outputs:

  linux_containers_matrix: 
    description: "The JSON-encoded matrix to use for the Linux containers tests."
    value: '{"fail-fast": false, "matrix": {"terraform_version": ${{ steps.terraform.outputs.versions }}, "images": ${{ steps.images.outputs.images }}, "runs-on": ["ubuntu-latest"], "exclude": ${{ steps.exclude.outputs.exclude }} }}'

  linux_shells_matrix: 
    description: "The JSON-encoded matrix to use for the Linux shells tests."
    value: '{"fail-fast": false, "matrix": {"terraform_version": ${{ steps.terraform.outputs.versions }}, "runs-on": ["ubuntu-latest"] }}'

  non_linux_matrix: 
    description: "The JSON-encoded matrix to use for non-Linux tests."
    value: '{"fail-fast": false, "matrix": {"terraform_version": ${{ steps.terraform.outputs.versions }}, "runs-on": ${{ steps.non-linux.outputs.names }} }}'


runs:
  using: 'composite'

  steps:

    - name: Get Images
      id: images
      shell: bash
      run: echo ::set-output name=images::'["alpine:latest", "redhat/ubi9:latest", "fedora:latest", "centos:latest", "ubuntu:latest", "amazonlinux:1", "amazonlinux:2"]'

    - name: Get Windows Operating Systems
      id: windows
      shell: bash
      run: echo ::set-output name=names::'["windows-2022", "windows-2019", "windows-2016"]'

    - name: Get MacOS Operating Systems
      id: macos
      shell: bash
      run: echo ::set-output name=names::'["mac-12", "mac-11", "mac-10.15"]'

    - name: Get Non-Linux Operating Systems
      id: non-linux
      shell: bash
      run: echo ::set-output name=names::'${{ toJSON(join(fromJSON(steps.windows.outputs.names), fromJSON(steps.macos.outputs.names))) }}'

    - name: Get Terraform Versions
      id: terraform
      shell: bash
      run: |
        set -eu -o pipefail

        lowest_version="${{ inputs.minimum_tf_version }}"
        lowest_major=$(echo $lowest_version | cut -d. -f1)
        lowest_minor=$(echo $lowest_version | cut -d. -f2)
        lowest_patch=$(echo $lowest_version | cut -d. -f3)

        versions_html=$(curl -s https://releases.hashicorp.com/terraform/ 2>&1)
        version_lines=$(echo "$versions_html" | grep -oE "terraform/[0-9]+\.[0-9]+\.[0-9]+/")

        selected_versions=""

        while read -r version ; do
            major=$(echo $version | cut -d. -f1)
            minor=$(echo $version | cut -d. -f2)
            patch=$(echo $version | cut -d. -f3)
            if [ $major -gt $lowest_major ] || ( [ $major -eq $lowest_major ] && [ $minor -gt $lowest_minor ] ) || ( [ $major -eq $lowest_major ] && [ $minor -eq $lowest_minor ] && [ $patch -ge $lowest_patch ] ); then
                if [ $patch -eq 0 ] || [ $version = $lowest_version ]; then
                    if [ -z $selected_versions ]; then
                        selected_versions="$version"
                    else
                        selected_versions="$selected_versions,$version"
                    fi
                fi
            fi
        done <<<$(echo "$version_lines" | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")

        echo ::set-output name=versions::$(jq -n --arg inarr "${selected_versions}" '$inarr | split(",")')

    # Generate excluded container configurations.
    # amazonlinux doesn't support anything below TF v0.13.x
    - name: Generate Excluded Container Configurations
      id: exclude
      shell: bash
      run: |
        set -eu -o pipefail

        images=("amazonlinux:1", "amazonlinux:2")
        tf_versions='${{ steps.terraform.outputs.versions }}'
        excluded=()

        for version in $(echo "${tf_versions}" | jq -r '.[]'); do
            major=$(echo $version | cut -d. -f1)
            minor=$(echo $version | cut -d. -f2)
            patch=$(echo $version | cut -d. -f3)

            if [ $major -eq 0 ] && [ $minor -le 13 ]; then
                for image in "${images[@]}"; do
                    excluded+=("{\"image\": \"$image\", \"terraform_version\": \"$version\"}")
                done
            fi
        done

        echo ::set-output name=exclude::$(echo "${excluded[@]}" | jq -s '.')
        