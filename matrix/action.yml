name: 'Terraform Module Testing Matrix'
description: 'Generates a Terraform module testing matrix for use with GitHub Actions. By default, it tests on the latest versions of Alpine, Redhat, Fedora, CentOS, Ubuntu, and Amazon Linux, and it tests the most recent patch version of each major/minor version of Terraform.'

inputs:
  minimum_tf_version:
    description: "The minimum version of Terraform to test with."
    required: true

  excluded_tf_versions:
    description: "A comma-separated list of Terraform versions to exclude for testing."
    required: false
    default: ""

  additional_runners:
    description: "A comma-separated list of additional GitHub runner types (e.g. specific operating systems) to test for. See https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories"
    required: false
    default: ""

  additional_images:
    description: "A comma-separated list of additional Docker images to test on. This is for Linux operating systems that GitHub does not offer as native runners."
    required: false
    default: ""

outputs:
  strategy: 
    description: "The JSON-encoded strategy to use for the testing jobs."
    value: ${{ steps.matrix.outputs.matrix }}

runs:
  using: 'composite'

  steps:

    # Get the list of Linux images that we want to test on
    - name: Get Images
      id: images
      shell: bash
      run: |
        images='["alpine:latest", "redhat/ubi9:latest", "fedora:latest", "centos:latest", "amazonlinux:latest"]'
        IFS=',' read -r -a additional_images <<< $(echo "${{ inputs.additional_images }}" | sed 's/[[:blank:]]//g')
        for image in "${additional_images[@]}"; do
            images=$(echo "$images" | jq -r ". + [\"$image\"]")
        done
        images=$(echo "$images" | jq -r --compact-output ". | unique")
        echo images="$images" >>$GITHUB_OUTPUT

    # Get the list of operating systems to test on
    - name: Get Operating Systems
      id: runners
      shell: bash
      run: |
        names='["windows-latest", "macos-latest"]'
        IFS=',' read -r -a additional_runners <<< $(echo "${{ inputs.additional_runners }}" | sed 's/[[:blank:]]//g')
        for runner in "${additional_runners[@]}"; do
            names=$(echo "$names" | jq -r ". + [\"$runner\"]")
        done
        names=$(echo "$names" | jq -r --compact-output ". | unique")
        echo names="$names" >>$GITHUB_OUTPUT

    # Get the full list of Terraform versions.
    # For each major/minor version, only get the first release (no subsequent patch versions)
    - name: Get Terraform Versions
      id: terraform
      shell: bash
      run: |
        set -eu -o pipefail
        # Strip whitespace from the minimum version input
        minimum_version=$(echo "${{ inputs.minimum_tf_version }}" | sed 's/[[:blank:]]//g')
        # Remove any whitespace from our excluded version string and split it on commas
        IFS=',' read -r -a excluded_versions <<< $(echo "${{ inputs.excluded_tf_versions }}" | sed 's/[[:blank:]]//g')
        minimum_major=$(echo $minimum_version | cut -d. -f1)
        minimum_minor=$(echo $minimum_version | cut -d. -f2)
        minimum_patch=$(echo $minimum_version | cut -d. -f3)

        versions_html=$(curl -s https://releases.hashicorp.com/terraform/ 2>&1)
        version_lines=$(echo "$versions_html" | grep -oE "terraform/[0-9]+\.[0-9]+\.[0-9]+/")

        contains_element () {
          local e match="$1"
          shift
          for e; do [[ "$e" == "$match" ]] && return 0; done
          return 1
        }

        selected_versions=()
        declare -A found_major_minor

        # Loop through a descending-sorted list of all version numbers. For the first seen major/minor version
        # that hasn't been seen yet, if it's above the minimum version then track it in the array. This
        # uses the most recent patch version of each major/minor version combo. We can't test each patch
        # version, it would just be way too many jobs.
        while read -r version ; do
            major=$(echo $version | cut -d. -f1)
            minor=$(echo $version | cut -d. -f2)
            patch=$(echo $version | cut -d. -f3)

            # If the major/minor combination doesn't exist in the associative array, consider this version
            if ! [ ${found_major_minor["$major.$minor"]+_} ]; then
                # Ensure it's at least as recent as our lowest version
                if [ $major -gt $minimum_major ] || ( [ $major -eq $minimum_major ] && [ $minor -gt $minimum_minor ] ) || ( [ $major -eq $minimum_major ] && [ $minor -eq $minimum_minor ] && [ $patch -ge $minimum_patch ] ); then
                    # Ensure the version we're considering isn't explicitly excluded
                    if ! contains_element $version "${excluded_versions[@]}"; then
                        found_major_minor["$major.$minor"]=true
                        selected_versions+=("$version")
                    fi
                fi
            fi
        done <<<$(echo "$version_lines" | grep -oE "[0-9]+\.[0-9]+\.[0-9]+" | sort --version-sort --reverse --field-separator=.)

        # Sort the version numbers, descending
        IFS=$'\n' selected_versions=($(sort -r --version-sort --field-separator=. <<<"${selected_versions[*]}"))
        unset IFS

        join_by () { local IFS="$1"; shift; echo "$*"; }

        echo versions=$(jq -n --arg inarr $(join_by , ${selected_versions[@]}) '$inarr | split(",")') >>$GITHUB_OUTPUT

    # Generate excluded container configurations.
    # amazonlinux doesn't support anything below TF v0.13.x
    - name: Generate Matrix
      id: matrix
      shell: bash
      run: |
        set -eu -o pipefail

        runners='${{ steps.runners.outputs.names }}'
        images='${{ steps.images.outputs.images }}'
        tf_versions='${{ steps.terraform.outputs.versions }}'

        matrix=()

        # Start with the Linux containers
        for image in $(echo "${images}" | jq -r '.[]'); do
          for version in $(echo "${tf_versions}" | jq -r '.[]'); do
            major=$(echo $version | cut -d. -f1)
            minor=$(echo $version | cut -d. -f2)
            # Exclude Amazon Linux 1/2 with any version less than 14
            if ! ( [ $major -eq 0 ] && [ $minor -lt 14 ] && ( [ "$image" = "amazonlinux:1" ] || [ "$image" = "amazonlinux:2" ] )) then
              matrix+=("{\"container\": {\"image\": \"$image\"}, \"runs-on\": \"ubuntu-latest\", \"terraform_version\": \"$version\", \"shells\": \"false\"}")
            fi
          done
        done

        # Add the Linux shell configurations
        for version in $(echo "${tf_versions}" | jq -r '.[]'); do
          matrix+=("{\"container\": \"\", \"runs-on\": \"ubuntu-latest\", \"terraform_version\": \"$version\", \"shells\": \"true\"}")
        done

        # Add the non-Linux configurations
        for os in $(echo "${runners}" | jq -r '.[]'); do
          for version in $(echo "${tf_versions}" | jq -r '.[]'); do
            matrix+=("{\"container\": \"\", \"runs-on\": \"$os\", \"terraform_version\": \"$version\", \"shells\": \"false\"}")
          done
        done

        _matrix=$(echo "${matrix[@]}" | jq -rs '.' )
        echo matrix=$(jq -n --argjson matrix "$_matrix" '{"fail-fast": false, "matrix": {"include": $matrix}}') >>$GITHUB_OUTPUT
